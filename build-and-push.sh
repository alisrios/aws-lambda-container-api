#!/bin/bash

# Script para build e push da imagem Docker para ECR
# Este script deve ser executado antes do terraform apply

set -e

BUILD_ARGS=""
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --no-cache)
            BUILD_ARGS="--no-cache"
            ;;
        *)
            echo "Unknown parameter passed: $1"
            exit 1
            ;;
    esac
    shift
done

# Configura√ß√µes
PROJECT_NAME=${PROJECT_NAME:-"lambda-container-api"}
ENVIRONMENT=${ENVIRONMENT:-"dev"}
AWS_REGION=${AWS_REGION:-"us-east-1"}

# Obter hash do commit Git (7 primeiros d√≠gitos)
if git rev-parse --git-dir > /dev/null 2>&1; then
    GIT_COMMIT_HASH=$(git rev-parse --short=7 HEAD 2>/dev/null || echo "no-commit")
else
    GIT_COMMIT_HASH="no-git"
fi

# Tags da imagem
ECR_IMAGE_TAG_LATEST="latest"
ECR_IMAGE_TAG_COMMIT="${GIT_COMMIT_HASH}"

# Construir nomes
ECR_REPOSITORY_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
LAMBDA_FUNCTION_NAME="${PROJECT_NAME}-${ENVIRONMENT}"

echo "üöÄ Iniciando build e push da imagem Docker..."
echo "üìã Configura√ß√µes:"
echo "   - Projeto: ${PROJECT_NAME}"
echo "   - Ambiente: ${ENVIRONMENT}"
echo "   - Regi√£o: ${AWS_REGION}"
echo "   - Reposit√≥rio ECR: ${ECR_REPOSITORY_NAME}"
echo "   - Tag Latest: ${ECR_IMAGE_TAG_LATEST}"
echo "   - Tag Commit: ${ECR_IMAGE_TAG_COMMIT}"

# Obter Account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
ECR_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
FULL_IMAGE_NAME_LATEST="${ECR_URI}/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}"
FULL_IMAGE_NAME_COMMIT="${ECR_URI}/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_COMMIT}"

echo "üì¶ URIs das imagens:"
echo "   - Latest: ${FULL_IMAGE_NAME_LATEST}"
echo "   - Commit: ${FULL_IMAGE_NAME_COMMIT}"

# Verificar se o reposit√≥rio ECR existe
echo "üîç Verificando se o reposit√≥rio ECR existe..."
if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY_NAME}" --region "${AWS_REGION}" >/dev/null 2>&1; then
    echo "‚ùå Reposit√≥rio ECR n√£o existe: ${ECR_REPOSITORY_NAME}"
    echo "üí° Para criar o reposit√≥rio, execute:"
    echo "   aws ecr create-repository --repository-name ${ECR_REPOSITORY_NAME} --region ${AWS_REGION}"
    echo "   ou use o Terraform para criar todos os recursos"
    exit 1
else
    echo "‚úÖ Reposit√≥rio ECR encontrado: ${ECR_REPOSITORY_NAME}"
fi

# Login no ECR
echo "üîê Fazendo login no ECR..."
aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${ECR_URI}"

# Limpar imagens antigas locais para evitar conflitos
echo "üßπ Limpando imagens antigas locais..."
docker rmi "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" 2>/dev/null || true
docker rmi "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_COMMIT}" 2>/dev/null || true
docker rmi "${FULL_IMAGE_NAME_LATEST}" 2>/dev/null || true
docker rmi "${FULL_IMAGE_NAME_COMMIT}" 2>/dev/null || true

# Verificar se o Docker buildx est√° dispon√≠vel e configurar se necess√°rio
echo "üîß Verificando Docker buildx..."
if ! docker buildx version >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Docker buildx n√£o est√° dispon√≠vel, usando docker build padr√£o"
    DOCKER_BUILD_CMD="docker build"
else
    echo "‚úÖ Docker buildx dispon√≠vel"
    # Criar builder se n√£o existir
    docker buildx create --name lambda-builder --use 2>/dev/null || docker buildx use lambda-builder 2>/dev/null || true
    DOCKER_BUILD_CMD="docker buildx build --load"
fi

# Build da imagem Docker com plataforma espec√≠fica para Lambda
echo "üèóÔ∏è  Fazendo build da imagem Docker para AWS Lambda (linux/amd64)..."
${DOCKER_BUILD_CMD} --platform linux/amd64 ${BUILD_ARGS} -t "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" -t "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_COMMIT}" .

# Tag as imagens com os nomes completos do ECR
echo "üè∑Ô∏è  Criando tags para ECR..."
docker tag "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" "${FULL_IMAGE_NAME_LATEST}"
docker tag "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_COMMIT}" "${FULL_IMAGE_NAME_COMMIT}"

# Verificar a imagem antes do push
echo "ÔøΩ Vezrificando a imagem constru√≠da..."
docker inspect "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" > /dev/null

# Testar se a imagem pode ser executada (teste b√°sico)
echo "üß™ Testando a imagem localmente..."
# Para imagens Lambda, testamos se os arquivos est√£o presentes
docker run --rm --platform linux/amd64 --entrypoint="" "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" python -c "
import lambda_function
import app
print('‚úÖ Todos os m√≥dulos importados com sucesso')
print('‚úÖ Imagem OK')
" || {
    echo "‚ùå Erro: A imagem n√£o passou no teste b√°sico"
    exit 1
}

# Verificar se a imagem tem o formato correto para Lambda
echo "üîç Verificando compatibilidade da imagem com Lambda..."
docker run --rm --platform linux/amd64 --entrypoint="" "${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG_LATEST}" ls -la /lambda-entrypoint.sh >/dev/null 2>&1 || {
    echo "‚ö†Ô∏è  Aviso: Imagem pode n√£o ter o entrypoint correto para Lambda"
}

# Verificar se as imagens foram taggeadas corretamente
echo "üîç Verificando tags das imagens..."
docker images | grep "${ECR_REPOSITORY_NAME}" || {
    echo "‚ùå Erro: Imagens n√£o foram taggeadas corretamente"
    exit 1
}

# Verificar o manifest da imagem para garantir compatibilidade com Lambda
echo "üîç Verificando manifest da imagem..."
docker inspect "${FULL_IMAGE_NAME_LATEST}" --format='{{.Architecture}}' | grep -q "amd64" || {
    echo "‚ùå Erro: Imagem n√£o est√° na arquitetura amd64"
    exit 1
}

# Verificar se a imagem tem o formato OCI correto
echo "üîç Verificando formato da imagem..."
docker inspect "${FULL_IMAGE_NAME_LATEST}" --format='{{.Config.Cmd}}' | grep -q "lambda_function.lambda_handler" || {
    echo "‚ö†Ô∏è  Aviso: CMD da imagem pode n√£o estar configurado corretamente"
}

# Push das imagens para ECR
echo "üì§ Fazendo push das imagens para ECR..."
echo "   - Enviando tag latest..."
docker push "${FULL_IMAGE_NAME_LATEST}"
echo "   - Enviando tag commit (${ECR_IMAGE_TAG_COMMIT})..."
docker push "${FULL_IMAGE_NAME_COMMIT}"

# Verificar se o push foi bem-sucedido
echo "‚úÖ Verificando se as imagens foram enviadas corretamente..."
aws ecr describe-images --repository-name "${ECR_REPOSITORY_NAME}" --region "${AWS_REGION}" --image-ids imageTag="${ECR_IMAGE_TAG_LATEST}" >/dev/null 2>&1 || {
    echo "‚ùå Erro: Falha ao verificar imagem no ECR"
    exit 1
}

echo "‚úÖ Build e push conclu√≠dos com sucesso!"
echo "üéØ Imagens dispon√≠veis em:"
echo "   - Latest: ${FULL_IMAGE_NAME_LATEST}"
echo "   - Commit: ${FULL_IMAGE_NAME_COMMIT}"

# Verificar se a fun√ß√£o Lambda existe e atualizar o c√≥digo se necess√°rio
echo "üîç Verificando se a fun√ß√£o Lambda existe..."
if aws lambda get-function --function-name "${LAMBDA_FUNCTION_NAME}" --region "${AWS_REGION}" >/dev/null 2>&1; then
    echo "üîÑ Atualizando c√≥digo da fun√ß√£o Lambda..."
    aws lambda update-function-code \
        --function-name "${LAMBDA_FUNCTION_NAME}" \
        --image-uri "${FULL_IMAGE_NAME_LATEST}" \
        --region "${AWS_REGION}"
    echo "‚úÖ C√≥digo da fun√ß√£o Lambda atualizado!"
else
    echo "‚ÑπÔ∏è  Fun√ß√£o Lambda n√£o existe ainda - ser√° criada pelo Terraform"
fi

echo "üéâ Processo conclu√≠do com sucesso!"