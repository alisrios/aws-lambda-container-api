# Configuração corrigida para o GitHub Actions workflow
# Substitua o conteúdo do seu arquivo .github/workflows/deploy.yml (ou similar) por este:

name: Deploy Lambda Container API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: lambda-container-api
  TERRAFORM_VERSION: 1.5.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Importante: Adicionar permissões para o GITHUB_TOKEN
    permissions:
      id-token: write   # Necessário para OIDC
      contents: read    # Necessário para checkout do código
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # IMPORTANTE: Adicionar o parâmetro role-to-assume
        role-to-assume: arn:aws:iam::148761658767:role/lambda-container-api-dev-github-actions-role
        role-session-name: GitHubActions-BuildAndPush-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var="image_uri=${{ steps.build-image.outputs.image }}"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -var="image_uri=${{ steps.build-image.outputs.image }}"
